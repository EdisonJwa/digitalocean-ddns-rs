name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: rustfmt, clippy
    - name: Install Requirements
      run: sudo apt-get update && sudo apt-get install -y build-essential musl-tools pkg-config libssl-dev
    - run: cargo clippy
    - name: Run tests
      run: cargo test --verbose
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

  build-linux:
    runs-on: ubuntu-20.04
    needs: build-check
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-pc-windows-gnu
          - x86_64-linux-android
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - aarch64-linux-android
          - arm-unknown-linux-gnueabi
          - arm-unknown-linux-gnueabihf
          - arm-unknown-linux-musleabi
          - arm-unknown-linux-musleabihf
          - armv7-unknown-linux-gnueabi
          - armv7-unknown-linux-gnueabihf
          - armv7-unknown-linux-musleabi
          - armv7-unknown-linux-musleabihf
    steps:
      - uses: actions/checkout@v4
      - name: install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
            toolchain: stable
            targets: ${{ matrix.target }}
      - name: install cross
        run: cargo install cross --git https://github.com/cross-rs/cross
      - name: Install Requirements
        if: "!contains(matrix.target, 'windows')"
        run: sudo apt-get update && sudo apt-get install -y build-essential musl-tools pkg-config libssl-dev
      - name: compile
        run: cross build --release --target=${{ matrix.target }}
      - name: upload unix binary
        if: "!contains(matrix.target, 'windows')"
        uses: actions/upload-artifact@v4
        with:
          name: edison-ddns-rs-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/edison-ddns-rs
      - name: upload windows binary
        if: "contains(matrix.target, 'windows')"
        uses: actions/upload-artifact@v4
        with:
          name: edison-ddns-rs-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/edison-ddns-rs.exe
  build-windows:
    runs-on: windows-latest
    needs: build-check
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - name: install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
            toolchain: nightly
            targets: ${{ matrix.target }}
      - name: compile
        run: cargo build --release --target=${{ matrix.target }}
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: edison-ddns-rs-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/edison-ddns-rs.exe
  build-apple:
    runs-on: macos-latest
    needs: build-check
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - aarch64-apple-ios
    steps:
      - uses: actions/checkout@v4
      - name: install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
            toolchain: nightly
            targets: ${{ matrix.target }}
      - name: compile
        run: cargo build --release --target=${{ matrix.target }}
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: ddns-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/edison-ddns-rs
